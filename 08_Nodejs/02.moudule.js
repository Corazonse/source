/*
    模块化
        在node中 一个js文件就是一个模块
        在node中 每一个js文件中的代码都是独立运行在一个函数中的
            而不是全局作用域 所以 一个模块中的变量和函数在其他模块无法访问


 */
console.log("你好")
/*
*   引入其他的模块
*   在node中 通过require("")函数来引入外部的模块
*       require()可以传递一个文件的路径作为参数 node将会自动根据该路径来引入外部模块
*       这里的路径 如果使用相对路径必须以 . or ..开头
*
*       使用require()引入模块以后 该函数会返回一个对象 这个对象代表的是引入的模块
*       使用require()引入外部模块式 使用的就是模块标识 我们可以通过模块标识来找到指定的模块
*           核心模块
*               由node引擎提供的模块
*               核心模块的表示 就是模块的名字
*           文件模块
*               由用户自己创建的模块
*               文件模块的标识就是路径 绝对或者相对路径
*
*
* *
* */
require("./01.hello")


//他的返回值就是导入模块的对象  向外部暴露 01 的属性或者方法 exports() 需要暴露给外部的属性设置为exports
var md = require("./01.hello")

// console.log(x)
console.log(md.y)
console.log(md)
//核心模块
let fs = require("fs")
console.log(fs)

